Index: app/src/main/java/com/example/modulus/FragmentInsights/ModuleDetailsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.modulus.FragmentInsights;\n\nimport static com.example.modulus.R.id.backgroup;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.content.ContextCompat;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.res.ColorStateList;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.text.Html;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.RatingBar;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.example.modulus.Adapter.ReviewAdapter;\nimport com.example.modulus.Adapter.ToDoAdapter;\nimport com.example.modulus.FragmentHome.AddNewTask;\nimport com.example.modulus.FragmentHome.HomeFragment;\nimport com.example.modulus.Model.ModuleModel;\nimport com.example.modulus.Model.ReviewModel;\nimport com.example.modulus.R;\nimport com.example.modulus.Utils.OnDialogCloseListener;\nimport com.example.modulus.Utils.WebView;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ModuleDetailsActivity extends AppCompatActivity implements OnDialogCloseListener {\n    public static ModuleModel selectedModule;\n    RecyclerView reviewRecyclerView;\n    FloatingActionButton addReview;\n    List<ReviewModel> reviewList;\n    ReviewAdapter reviewAdapter;\n    DataBaseHelperReviews dbReview;\n    TextView overallScore;\n    RatingBar overallRating;\n    final String TAG = \"Module Insights\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.insights_activity_module_details);\n\n\n        getSelectedModule();\n        setValues();\n\n        RelativeLayout backButton = findViewById(backgroup);\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                finish();\n            }\n        });\n\n        TextView info = findViewById(R.id.moduleDetailsPillar);\n        info.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if (WebView.isNetworkAvailable(ModuleDetailsActivity.this)) {\n                    openURL();\n                } else {\n                    Toast.makeText(ModuleDetailsActivity.this, \"No Network\", Toast.LENGTH_SHORT).show();\n                }\n            }\n        });\n        dbReview = new DataBaseHelperReviews(this);\n        //insertReviewsFromJson();\n//        insertReviewsFromJson();\n        float average = dbReview.getOverallRating(selectedModule.getId());\n        Log.d(\"OverallRating\", \"Average Rating: \" + average);\n        overallScore = findViewById(R.id.overallScore);\n        overallRating = findViewById(R.id.overallRating);\n        overallScore.setText(String.format(\"%.1f\", average));\n        overallRating.setRating(average);\n        int star = ContextCompat.getColor(this, selectedModule.getColor());\n        ColorStateList csl = ColorStateList.valueOf(star);\n        overallRating.setProgressTintList(csl);\n        overallRating.setProgressBackgroundTintList(csl);\n        overallRating.setSecondaryProgressTintList(csl);\n        overallScore.setTextColor(star);\n\n\n        reviewRecyclerView = findViewById(R.id.reviewRecyclerView);\n        // Setup RecyclerView\n\n\n        reviewList = new ArrayList<>();\n        reviewList = dbReview.getModuleReviews(selectedModule.getId());\n\n        Log.d(\"moduleactivity\", selectedModule.getId());\n\n        reviewAdapter = new ReviewAdapter(reviewList,star);\n        reviewRecyclerView.setAdapter(reviewAdapter);\n\n        // SQLite helper\n        reviewRecyclerView.setLayoutManager(new LinearLayoutManager(this));\n        reviewAdapter.notifyDataSetChanged();\n\n\n        addReview = findViewById(R.id.addReviewButton);\n        addReview.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                AddNewReview.newInstance().show(getSupportFragmentManager(), AddNewReview.TAG);\n                Log.d(\"addButton\",\"AddNewReview instance\");\n            }\n        });\n\n\n\n    }\n\n    // Listener callback from AddNewReview dialog\n    @Override\n    public void onDialogClose(DialogInterface dialog) {\n        // Clear the current list and fetch the new data from the database\n        reviewList.clear();\n        reviewList.addAll(dbReview.getModuleReviews(selectedModule.getId()));\n        reviewAdapter.notifyDataSetChanged();\n        Log.d(TAG, \"Review list updated after dialog closed\");\n    }\n\n    private void getSelectedModule() {\n        Intent previousIntent = getIntent();\n        String parsedStringID = previousIntent.getStringExtra(\"id\");\n        selectedModule = getParsedModule(parsedStringID);\n    }\n\n    private ModuleModel getParsedModule(String parsedID) {\n        for (ModuleModel module : InsightsFragment.moduleList) {\n            if(module.getId().equals(parsedID))\n                return module;\n        }\n        return null;\n    }\n\n    private void setValues() {\n\n\n\n        TextView Name = findViewById(R.id.moduleDetailsName);\n        Name.setText(selectedModule.getName());\n\n        TextView pillar = findViewById(R.id.moduleDetailsPillar);\n        pillar.setText(selectedModule.getPillar() + \" \" + selectedModule.getId());\n        int color = ContextCompat.getColor(this, selectedModule.getColor());\n        pillar.setTextColor(color);\n        pillar.setCompoundDrawableTintList(ColorStateList.valueOf(color));\n\n\n        TextView tags = findViewById(R.id.tags);\n        tags.setText( selectedModule.getType());\n        tags.setTextColor(color);\n\n        TextView prof = findViewById(R.id.termProf);\n        prof.setText(String.join(\", \", selectedModule.getProf()));\n        prof.setTextColor(color);\n\n\n        RelativeLayout back = findViewById(R.id.backgroup);\n        back.setBackgroundColor(color);\n\n        TextView term = findViewById(R.id.terms);\n        term.setText(String.join(\", \", selectedModule.getTerm()));\n        term.setTextColor(color);\n\n        ImageView imageMod = findViewById(R.id.imageMod);\n        imageMod.setImageDrawable(selectedModule.getImage());\n\n\n\n\n        TextView preReq = findViewById(R.id.prerequisites);\n        List<String> modPreReq = selectedModule.getPrerequisites();\n        List<String> output = new ArrayList<>();\n        for(String id: modPreReq){\n            if(!id.contains(\"/\")){\n                ModuleModel module = InsightsFragment.moduleList.stream().filter(m -> id.contains(m.getId())).findFirst().orElse(null);\n                if(module != null){\n                    output.add(module.toString());\n                }\n            }else{\n                String[] splitMods = id.split(\"/\");\n                StringBuilder orString = new StringBuilder();\n                for(int i = 0; i < splitMods.length; i++){\n                    String innerId = splitMods[i];\n                    ModuleModel module = InsightsFragment.moduleList.stream().filter(m -> innerId.contains(m.getId())).findFirst().orElse(null);\n                    if(module != null) {\n                        orString.append(module);\n                    }\n                    if(i < splitMods.length - 1){\n                        orString.append(\" <b>OR</b><br />\");\n                    }\n                }\n                output.add(orString.toString());\n            }\n\n\n        }\n\n        if (!output.isEmpty()){\n            preReq.setText(Html.fromHtml(TextUtils.join(\"<br>\", output), Html.FROM_HTML_MODE_LEGACY));\n\n\n        } else{\n            preReq.setText(\"No Pre-requisites\");\n        }\n\n        preReq.setTextColor(color);\n\n    }\n\n    private void openURL(){\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        Looper uiLooper = Looper.getMainLooper();\n        final Handler handler = new Handler(uiLooper);\n\n        executorService.execute(new Runnable() {\n            @Override\n            public void run() { // Background thread\n                URL url = WebView.getURLFromDesc(selectedModule);\n                String response = WebView.getJson(url);\n                if (response == null) {\n                    handler.post(new Runnable() { // Main thread\n                        @Override\n                        public void run() {\n                            // main thread\n                            Log.i(\"UI Thread\", \"Invalid URL\");\n                            Toast.makeText(ModuleDetailsActivity.this, \"Invalid URL\", Toast.LENGTH_SHORT).show();\n                        }\n                    });\n                } else {\n                    handler.post(new Runnable() {\n                        // main thread\n                        @Override\n                        public void run() {\n                            Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(selectedModule.getDescription()));\n                            startActivity(browserIntent);\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    private void insertReviewsFromJson() {\n        try {\n            InputStream is = getAssets().open(\"generated_module_reviews_v2.json\");\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n            String jsonStr = new String(buffer, StandardCharsets.UTF_8);\n\n            JSONArray jsonArray = new JSONArray(jsonStr);\n            for (int i = 0; i < jsonArray.length(); i++) {\n                JSONObject reviewObj = jsonArray.getJSONObject(i);\n\n                ReviewModel model = new ReviewModel();\n                model.setModuleId(reviewObj.getString(\"MODULEID\"));\n                model.setUsername(reviewObj.getString(\"USERNAME\"));\n                model.setRating(reviewObj.getString(\"RATING\"));\n                model.setComment(reviewObj.getString(\"REVIEW\"));\n\n                dbReview.insertTask(model);\n            }\n\n            Log.d(\"DB_INSERT\", \"Inserted \" + jsonArray.length() + \" reviews\");\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            Log.e(\"DB_INSERT\", \"Failed to insert reviews: \" + e.getMessage());\n        }\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/modulus/FragmentInsights/ModuleDetailsActivity.java b/app/src/main/java/com/example/modulus/FragmentInsights/ModuleDetailsActivity.java
--- a/app/src/main/java/com/example/modulus/FragmentInsights/ModuleDetailsActivity.java	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ b/app/src/main/java/com/example/modulus/FragmentInsights/ModuleDetailsActivity.java	(date 1744781069917)
@@ -87,7 +87,6 @@
             }
         });
         dbReview = new DataBaseHelperReviews(this);
-        //insertReviewsFromJson();
 //        insertReviewsFromJson();
         float average = dbReview.getOverallRating(selectedModule.getId());
         Log.d("OverallRating", "Average Rating: " + average);
Index: app/src/main/java/com/example/modulus/FragmentHome/DataBaseHelperHome.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.modulus.FragmentHome;\n\nimport android.annotation.SuppressLint;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.util.Log;\n\nimport com.example.modulus.Model.ToDoModel;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DataBaseHelperHome extends SQLiteOpenHelper {\n    private static final String DATABASE_NAME = \"MODULUS\";\n    private static final String TABLE_NAME = \"HOME_TABLE\";\n    private static final String COL_1 = \"ID\";\n    private static final String COL_2 = \"TASK\";\n    private static final String COL_3 = \"STATUS\";\n    private static final String COL_4 = \"DATE\";\n    private static final String COL_5 = \"TIME\";\n\n    private static final String COL_6 = \"CATEGORY\";\n\n    private final String TAG = \"Home DB\";\n    public DataBaseHelperHome(Context context) {\n        super(context, DATABASE_NAME, null, 1);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(\"CREATE TABLE IF NOT EXISTS \" + TABLE_NAME + \"(ID INTEGER PRIMARY KEY AUTOINCREMENT, TASK TEXT, STATUS INTEGER, DATE DATE, TIME TEXT, CATEGORY TEXT)\");\n        Log.d(TAG, \"Create to do database\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        db.execSQL(\"DROP TABLE IF EXISTS \"+ TABLE_NAME);\n        onCreate(db);\n    }\n\n    public void insertTask(ToDoModel model){\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues contentValues = new ContentValues();\n        contentValues.put(COL_2, model.getTask());\n        contentValues.put(COL_3, 0);\n        contentValues.put(COL_4, model.getDate());\n        contentValues.put(COL_5, model.getTime());\n        contentValues.put(COL_6, model.getCategory());\n\n\n        db.insert(TABLE_NAME, null, contentValues);\n        Log.d(TAG, \"Insert task\");\n    }\n\n    public void updateTask(int id, String task, String date, String category,String time){\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues contentValues = new ContentValues();\n        contentValues.put(COL_2, task);\n        contentValues.put(COL_4, date);\n        contentValues.put(COL_5, time);\n        contentValues.put(COL_6, category);\n        db.update(TABLE_NAME, contentValues, \"ID=?\", new String[]{String.valueOf(id)});\n        Log.d(TAG, \"Update task\");\n    }\n\n    public void updateStatus(int id, int status){\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues contentValues = new ContentValues();\n        contentValues.put(COL_3, status);\n\n        db.update(TABLE_NAME, contentValues, \"ID=?\", new String[]{String.valueOf(id)});\n    }\n    public void updateDate(int id, String date){\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues contentValues = new ContentValues();\n        contentValues.put(COL_4, date);\n\n        db.update(TABLE_NAME, contentValues, \"ID=?\", new String[]{String.valueOf(id)});\n    }\n\n    public void updateTime(int id, String time){\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues contentValues = new ContentValues();\n        contentValues.put(COL_5, time);\n\n        db.update(TABLE_NAME, contentValues, \"ID=?\", new String[]{String.valueOf(id)});\n    }\n\n    public void updateCategory(int id, String category){\n        SQLiteDatabase db = this.getWritableDatabase();\n        ContentValues contentValues = new ContentValues();\n        contentValues.put(COL_6, category);\n\n        db.update(TABLE_NAME, contentValues, \"ID=?\", new String[]{String.valueOf(id)});\n    }\n    public void deleteTask(int id){\n        SQLiteDatabase db = this.getWritableDatabase();\n        db.delete(TABLE_NAME,\"ID=?\", new String[]{String.valueOf(id)});\n        Log.d(TAG, \"Task deleted\");\n    }\n    @SuppressLint(\"Range\")\n    public List<ToDoModel> getDateTask(String date){\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cursor = null;\n        List<ToDoModel> modelList = new ArrayList<>();\n        db.beginTransaction();\n        try{\n            String selection = COL_4 + \" = ?\";\n            String[] selectionArgs = { date };\n\n            cursor = db.query(TABLE_NAME, null, selection, selectionArgs, null, null, null);\n            if(cursor != null){\n                if(cursor.moveToFirst()){\n                    do{\n                        ToDoModel toDoModel = new ToDoModel();\n                        toDoModel.setId((cursor.getInt(cursor.getColumnIndex(COL_1))));\n                        toDoModel.setTask((cursor.getString(cursor.getColumnIndex(COL_2))));\n                        toDoModel.setStatus((cursor.getInt(cursor.getColumnIndex(COL_3))));\n                        toDoModel.setDate((cursor.getString(cursor.getColumnIndex(COL_4))));\n                        toDoModel.setTime((cursor.getString(cursor.getColumnIndex(COL_5))));\n                        toDoModel.setCategory((cursor.getString(cursor.getColumnIndex(COL_6))));\n                        modelList.add(toDoModel);\n\n                    }while (cursor.moveToNext());\n                }\n            }\n        }finally {\n            db.endTransaction();\n            cursor.close();\n        }\n        return modelList;\n    }\n    @SuppressLint(\"Range\")\n    public List<ToDoModel> getAllTasks(){\n        Log.d(TAG, \"Get all tasks\");\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cursor = null;\n        List<ToDoModel> modelList = new ArrayList<>();\n\n        db.beginTransaction();\n        try{\n            cursor = db.query(TABLE_NAME,null,null,null,null,null, null);\n            if(cursor != null){\n                if(cursor.moveToFirst()){\n                    do{\n                        ToDoModel toDoModel = new ToDoModel();\n                        toDoModel.setId((cursor.getInt(cursor.getColumnIndex(COL_1))));\n                        toDoModel.setTask((cursor.getString(cursor.getColumnIndex(COL_2))));\n                        toDoModel.setStatus((cursor.getInt(cursor.getColumnIndex(COL_3))));\n                        toDoModel.setDate((cursor.getString(cursor.getColumnIndex(COL_4))));\n                        toDoModel.setTime((cursor.getString(cursor.getColumnIndex(COL_5))));\n                        toDoModel.setCategory((cursor.getString(cursor.getColumnIndex(COL_6))));\n                        modelList.add(toDoModel);\n\n                    }while (cursor.moveToNext());\n                }\n            }\n        }finally {\n            db.endTransaction();\n            cursor.close();\n        }\n        Log.d(TAG, \"Retrieved all tasks\");\n        return modelList;\n    }\n\n    @SuppressLint(\"Range\")\n    public List<ToDoModel> getStatustask(int status, String date) {\n        SQLiteDatabase db = this.getReadableDatabase();\n        Cursor cursor = null;\n        List<ToDoModel> modelList = new ArrayList<>();\n\n        try {\n            // Combined WHERE clause for both status and date\n            String selection = COL_3 + \" = ? AND \" + COL_4 + \" = ?\";\n            String[] selectionArgs = {String.valueOf(status), date};\n\n            cursor = db.query(TABLE_NAME, null, selection, selectionArgs, null, null, null);\n\n            if (cursor != null && cursor.moveToFirst()) {\n                do {\n                    ToDoModel toDoModel = new ToDoModel();\n                    toDoModel.setId(cursor.getInt(cursor.getColumnIndex(COL_1)));\n                    toDoModel.setTask(cursor.getString(cursor.getColumnIndex(COL_2)));\n                    toDoModel.setStatus(cursor.getInt(cursor.getColumnIndex(COL_3)));\n                    toDoModel.setDate(cursor.getString(cursor.getColumnIndex(COL_4)));\n                    toDoModel.setTime(cursor.getString(cursor.getColumnIndex(COL_5)));\n                    toDoModel.setCategory(cursor.getString(cursor.getColumnIndex(COL_6)));\n                    modelList.add(toDoModel);\n                } while (cursor.moveToNext());\n            }\n        } finally {\n            if (cursor != null) cursor.close();\n        }\n\n        return modelList;\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/modulus/FragmentHome/DataBaseHelperHome.java b/app/src/main/java/com/example/modulus/FragmentHome/DataBaseHelperHome.java
--- a/app/src/main/java/com/example/modulus/FragmentHome/DataBaseHelperHome.java	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ b/app/src/main/java/com/example/modulus/FragmentHome/DataBaseHelperHome.java	(date 1744772692186)
@@ -21,7 +21,6 @@
     private static final String COL_3 = "STATUS";
     private static final String COL_4 = "DATE";
     private static final String COL_5 = "TIME";
-
     private static final String COL_6 = "CATEGORY";
 
     private final String TAG = "Home DB";
Index: app/src/main/java/com/example/modulus/FragmentHome/HomeFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.modulus.FragmentHome;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.os.Bundle;\n\nimport androidx.core.content.ContextCompat;\nimport androidx.fragment.app.Fragment;\n\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport android.content.DialogInterface;\nimport android.widget.Button;\nimport android.widget.TextView;\n\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\nimport androidx.recyclerview.widget.ItemTouchHelper;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.example.modulus.Adapter.DateItemAdapter;\nimport com.example.modulus.Adapter.ToDoAdapter;\nimport com.example.modulus.Model.MergeSort;\nimport com.example.modulus.Model.ToDoModel;\nimport com.example.modulus.R;\nimport com.example.modulus.Utils.OnDialogCloseListener;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.time.DayOfWeek;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.time.format.TextStyle;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\n\npublic class HomeFragment extends Fragment implements OnDialogCloseListener {\n    RecyclerView taskRecyclerView, dateItemRecycler;\n    FloatingActionButton addButton;\n    DataBaseHelperHome myDB;\n    Button allButton, toDoButton, completedButton;\n    TextView homeTitle;\n\n    MergeSort sortTime = new MergeSort(ToDoModel.timeCompare);\n    private List<ToDoModel> mList;\n    private ToDoAdapter toDoAdapter;\n    final Calendar calendar = Calendar.getInstance();\n    final int year = calendar.get(Calendar.YEAR);\n    final int month = calendar.get(Calendar.MONTH) + 1;\n    final int day = calendar.get(Calendar.DAY_OF_MONTH);\n    String currentDate = day + \"/\" + month + \"/\" + year;\n\n    public String clickedDate = currentDate;\n\n    @SuppressLint(\"MissingInflatedId\")\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n//        insertTasksFromJson(this.getContext());\n        View view = inflater.inflate(R.layout.fragment_home, container, false);\n        ViewCompat.setOnApplyWindowInsetsListener(view.findViewById(R.id.homeMain), (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n            return insets;\n        });\n\n        // Set Title to current date\n        homeTitle = view.findViewById(R.id.homeTitle);\n        // Convert your currentDate string to a LocalDate\n        DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern(\"d/M/yyyy\");\n        LocalDate todayDate = LocalDate.parse(currentDate, inputFormatter);\n\n        // Extract day of week, day of month, and month name\n        DayOfWeek dayOfWeek = todayDate.getDayOfWeek();\n        int dayOfMonth = todayDate.getDayOfMonth();\n        String monthName = todayDate.getMonth().getDisplayName(TextStyle.FULL, Locale.ENGLISH); // \"April\"\n\n        // Format the display text\n        String displayText = String.format(\"Welcome! It's %s %d %s\", dayOfWeek.getDisplayName(TextStyle.FULL, Locale.ENGLISH), dayOfMonth, monthName);\n\n        // Set the formatted text to your TextView\n        homeTitle.setText(displayText);\n\n\n        //Date Items Recycler\n        dateItemRecycler = view.findViewById(R.id.dateItemRecycler);\n        //LinearLayoutManager layoutManager = new LinearLayoutManager(this.getContext(), LinearLayoutManager.HORIZONTAL, false);\n        ScaleCenterItemManager layoutManager = new ScaleCenterItemManager(this.getContext(),LinearLayoutManager.HORIZONTAL,false);\n        dateItemRecycler.setLayoutManager(layoutManager);\n        generateData();\n\n\n        //Task Recycler\n        taskRecyclerView = view.findViewById(R.id.recyclerView);\n        myDB = new DataBaseHelperHome(this.getContext());\n        toDoAdapter = new ToDoAdapter(myDB, this);\n        taskRecyclerView.setHasFixedSize(true);\n        taskRecyclerView.setLayoutManager(new LinearLayoutManager(this.getContext()));\n        taskRecyclerView.setAdapter(HomeFragment.this.toDoAdapter);\n        mList = sort(myDB.getDateTask(currentDate)); // Adjust format if needed\n//        Collections.reverse(mList);\n        HomeFragment.this.toDoAdapter.setTasks(mList);\n        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(new RecyclerViewTouchHelper(toDoAdapter));\n        itemTouchHelper.attachToRecyclerView(taskRecyclerView);\n\n\n\n        //Add Button\n        addButton = view.findViewById(R.id.addButton);\n        addButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                AddNewTask.newInstance().show(getChildFragmentManager(), AddNewTask.TAG);\n                Log.d(\"addButton\",\"AddNewTask instance\");\n            }\n        });\n\n        //Buttons\n        //String clickedDate = currentDate;\n        allButton = view.findViewById(R.id.AllButton);\n        allButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                mList = sort(myDB.getDateTask(clickedDate)); // Adjust format if needed\n//                Collections.reverse(mList);\n                HomeFragment.this.toDoAdapter.setTasks(mList);\n                highlightSelectedButton(allButton, toDoButton, completedButton);\n            }\n        });\n\n        toDoButton = view.findViewById(R.id.ToDoButton);\n        toDoButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                mList = sort(myDB.getStatustask(0,clickedDate)); // Adjust format if needed\n//                Collections.reverse(mList);\n                HomeFragment.this.toDoAdapter.setTasks(mList);\n                highlightSelectedButton(toDoButton, allButton, completedButton);\n            }\n        });\n\n        completedButton = view.findViewById(R.id.CompletedButton);\n        completedButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                mList = sort(myDB.getStatustask(1, clickedDate)); // Adjust format if needed\n//                Collections.reverse(mList);\n                HomeFragment.this.toDoAdapter.setTasks(mList);\n                highlightSelectedButton(completedButton, allButton, toDoButton);\n            }\n        });\n\n        highlightSelectedButton(allButton, toDoButton, completedButton);\n\n        // Inflate the layout for this fragment\n        return view;\n    }\n\n    private void generateData() {\n        List<LocalDate> dateList = new ArrayList<>();\n        LocalDate today = LocalDate.now();\n        int currentYear = today.getYear();\n        int currentMonth = today.getMonthValue();\n        LocalDate firstDayOfMonth = LocalDate.of(currentYear, currentMonth, 1);\n        int daysInMonth = firstDayOfMonth.lengthOfMonth();\n\n        // Add all dates of the current month\n        for (int i = 1; i <= daysInMonth; i++) {\n            dateList.add(LocalDate.of(currentYear, currentMonth, i));\n        }\n\n        DateItemAdapter adapter = new DateItemAdapter(dateList, new DateItemAdapter.OnItemClickListener() {\n            @Override\n            public void onItemClick(LocalDate date) {\n                // Handle the click event (same logic as testButton)\n                //System.out.println(\"Selected date: \" + date.toString());\n                String getDate = date.format(DateTimeFormatter.ofPattern(\"d/M/yyyy\"));\n                clickedDate = getDate;\n                taskRecyclerView.setAdapter(HomeFragment.this.toDoAdapter);\n                mList = sort(myDB.getDateTask(getDate)); // Adjust format if needed\n//                Collections.reverse(mList);\n                HomeFragment.this.toDoAdapter.setTasks(mList);\n            }\n        });\n\n        dateItemRecycler.setAdapter(adapter);\n\n        // Scroll to current date when opening\n        int todayPosition = today.getDayOfMonth() - 1;\n        dateItemRecycler.scrollToPosition(todayPosition-2);\n    }\n\n    @Override\n    public void onDialogClose(DialogInterface dialogInterface) {\n        Log.d(\"Home\", \"onDialogClose\");\n        mList = sort(myDB.getAllTasks());\n//        Collections.reverse(mList);\n        toDoAdapter.setTasks(mList);\n        toDoAdapter.notifyDataSetChanged();\n\n    }\n\n    private void highlightSelectedButton(Button selected, Button... others) {\n        selected.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.dark_purple));\n        selected.setTextColor(ContextCompat.getColor(getContext(), R.color.white));\n\n        for (Button btn : others) {\n            btn.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.light_purple));\n            btn.setTextColor(ContextCompat.getColor(getContext(), R.color.black));\n        }\n    }\n\n\n    private void insertTasksFromJson(Context context) {\n        DataBaseHelperHome dbHelper = new DataBaseHelperHome(context);\n        try {\n            // Load JSON from assets\n            InputStream is = context.getAssets().open(\"school_tasks.json\");\n            int size = is.available();\n            byte[] buffer = new byte[size];\n            is.read(buffer);\n            is.close();\n\n            // Convert to JSON string\n            String json = new String(buffer, StandardCharsets.UTF_8);\n\n            // Parse JSON array\n            JSONArray jsonArray = new JSONArray(json);\n            for (int i = 0; i < jsonArray.length(); i++) {\n                JSONObject taskObject = jsonArray.getJSONObject(i);\n\n                ToDoModel model = new ToDoModel();\n                model.setTask(taskObject.getString(\"task\"));\n                model.setStatus(taskObject.getInt(\"status\"));\n                model.setDate(taskObject.getString(\"date\"));\n                model.setTime(taskObject.getString(\"time\"));\n                model.setCategory(taskObject.getString(\"category\"));\n\n                dbHelper.insertTask(model);\n            }\n\n            Log.d(\"DB_INSERT\", \"All tasks inserted successfully\");\n\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            Log.e(\"DB_INSERT\", \"Error inserting tasks: \" + e.getMessage());\n        }\n    }\n\n    private List<ToDoModel> sort(List<ToDoModel> list){\n        List<ToDoModel> status1 = new ArrayList<>();\n        List<ToDoModel> status2 = new ArrayList<>();\n        for(ToDoModel task: list){\n            if(task.getStatus() == 0 ){\n                status1.add(task);\n            }else{\n                status2.add(task);\n            }\n        }\n        sortTime.mergeSort(status1, status1.size());\n        sortTime.mergeSort(status2, status2.size());\n        status1.addAll(status2);\n        return status1;\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/modulus/FragmentHome/HomeFragment.java b/app/src/main/java/com/example/modulus/FragmentHome/HomeFragment.java
--- a/app/src/main/java/com/example/modulus/FragmentHome/HomeFragment.java	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ b/app/src/main/java/com/example/modulus/FragmentHome/HomeFragment.java	(date 1744781990537)
@@ -70,7 +70,7 @@
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-//        insertTasksFromJson(this.getContext());
+        insertTasksFromJson(this.getContext());
         View view = inflater.inflate(R.layout.fragment_home, container, false);
         ViewCompat.setOnApplyWindowInsetsListener(view.findViewById(R.id.homeMain), (v, insets) -> {
             Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
@@ -207,7 +207,7 @@
     @Override
     public void onDialogClose(DialogInterface dialogInterface) {
         Log.d("Home", "onDialogClose");
-        mList = sort(myDB.getAllTasks());
+        mList = sort(myDB.getDateTask(clickedDate));
 //        Collections.reverse(mList);
         toDoAdapter.setTasks(mList);
         toDoAdapter.notifyDataSetChanged();
@@ -242,6 +242,7 @@
             JSONArray jsonArray = new JSONArray(json);
             for (int i = 0; i < jsonArray.length(); i++) {
                 JSONObject taskObject = jsonArray.getJSONObject(i);
+                Log.d("db testing", "HELPPPPP");
 
                 ToDoModel model = new ToDoModel();
                 model.setTask(taskObject.getString("task"));
@@ -265,7 +266,7 @@
         List<ToDoModel> status1 = new ArrayList<>();
         List<ToDoModel> status2 = new ArrayList<>();
         for(ToDoModel task: list){
-            if(task.getStatus() == 0 ){
+            if(task.getStatus() == 0){
                 status1.add(task);
             }else{
                 status2.add(task);
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm__Changes_.xml	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ /dev/null	(revision 09d2597df115954b257e49c187d32d151604aaaf)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm_[Changes]" date="1744264744815" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 10/4/2025 1:59 pm [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03__Changes_.xml	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ /dev/null	(revision 09d2597df115954b257e49c187d32d151604aaaf)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_11_04_2025_00_03_[Changes]" date="1744301012064" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 11/04/2025 00:03 [Changes]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_11_04_2025_00_03_[Changes]/shelved.patch	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ /dev/null	(revision 09d2597df115954b257e49c187d32d151604aaaf)
@@ -1,15 +0,0 @@
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"jbr-21\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n  <component name=\"VisualizationToolProject\">\r\n    <option name=\"state\">\r\n      <ProjectState>\r\n        <option name=\"scale\" value=\"0.1067463706233988\" />\r\n      </ProjectState>\r\n    </option>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 8d02c77ee7dc84b6f1e4f6ffd9fcb9325e1c1cee)
-+++ b/.idea/misc.xml	(date 1744278095184)
-@@ -1,4 +1,3 @@
--<?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
-   <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="jbr-21" project-jdk-type="JavaSDK">
Index: .idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_10_4_2025_1_59_pm_[Changes]/shelved.patch	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ /dev/null	(revision 09d2597df115954b257e49c187d32d151604aaaf)
@@ -1,18 +0,0 @@
-Index: app/src/main/java/com/example/modulus/FragmentCalendar/CalendarFragment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.modulus.FragmentCalendar;\r\n\r\nimport static com.example.modulus.R.id.dayView;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.CalendarView;\r\nimport android.widget.ImageButton;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.modulus.R;\r\nimport com.framgia.library.calendardayview.CalendarDayView;\r\nimport com.framgia.library.calendardayview.DayView;\r\nimport com.framgia.library.calendardayview.data.IEvent;\r\nimport com.framgia.library.calendardayview.decoration.CdvDecorationDefault;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\n\r\n\r\n\r\n\r\npublic class CalendarFragment extends Fragment {\r\n\r\n\r\n    private CalendarView calendarView;\r\n    private CalendarDayView hourlyDayView;\r\n\r\n    private ImageButton addEventButton;\r\n    private TextView selectedDateText;\r\n    private ArrayList<Event> allEvents;\r\n    final String TAG = \"Calendar\";\r\n\r\n\r\n    @SuppressLint(\"MissingInflatedId\")\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n\r\n        // Inflate the layout for this fragment\r\n        View view =  inflater.inflate(R.layout.fragment_calendar, container, false);\r\n\r\n\r\n        //set up modules list\r\n        if (allEvents == null || allEvents.isEmpty() )  {\r\n            Log.d(TAG, \"Setting up modules\");\r\n            setupData();\r\n        }\r\n        Log.d(TAG, \"Database set up\");\r\n\r\n        //Initialisation\r\n        calendarView = view.findViewById(R.id.calendar);\r\n        hourlyDayView = view.findViewById(dayView);\r\n        addEventButton = view.findViewById(R.id.addEventButton);\r\n        selectedDateText = view.findViewById(R.id.selectedDateText);\r\n\r\n        //Override library time format for nicer readability\r\n        hourlyDayView.setDecorator(new CdvDecorationDefault(getContext()) {\r\n            @Override\r\n            public DayView getDayView(int hour) {\r\n                DayView dayView = new DayView(getContext());\r\n                Calendar calendar = Calendar.getInstance();\r\n                calendar.set(Calendar.HOUR_OF_DAY, hour);\r\n                calendar.set(Calendar.MINUTE, 0);\r\n                SimpleDateFormat sdf = new SimpleDateFormat(\"h a\");\r\n                dayView.setText(sdf.format(calendar.getTime()).toUpperCase());\r\n                return dayView;\r\n            }\r\n        });\r\n\r\n\r\n        //Default event shown to be today's date\r\n        Calendar today = Calendar.getInstance();\r\n        String todayFormatted = android.text.format.DateFormat.format(\"dd MMMM\", today.getTime()).toString();\r\n        selectedDateText.setText(\"Schedule On \" + todayFormatted);\r\n        loadEventsForSelectedDates(today);\r\n\r\n\r\n        //Onclick, change date to SelectedDate on Calendarview\r\n        calendarView.setOnDateChangeListener(new CalendarView.OnDateChangeListener() {\r\n            @Override\r\n            public void onSelectedDayChange(@NonNull CalendarView view, int year, int month, int dayOfMonth) {\r\n                Calendar selectedDates = Calendar.getInstance();\r\n                selectedDates.set(year,month,dayOfMonth);\r\n                String selectedFormatted = android.text.format.DateFormat.format(\"dd MMMM\", selectedDates.getTime()).toString();\r\n                selectedDateText.setText(\"Schedule On \" + selectedFormatted);\r\n                loadEventsForSelectedDates(selectedDates);\r\n            }\r\n        });\r\n\r\n\r\n//        addEventButton.setOnClickListener();\r\n\r\n        return view;\r\n    }\r\n\r\n\r\n\r\n    private void setupData() {\r\n        DataBaseHelperCalendar myDB = new DataBaseHelperCalendar(getContext());\r\n        allEvents = (ArrayList<Event>) myDB.getAllEvents();\r\n\r\n        Log.d(TAG, \"Retrieved \"+ allEvents.size() + \"events from database\");\r\n\r\n        for (Event event :allEvents){\r\n            event.setColour(ContextCompat.getColor(getContext(),event.getColor()));\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    //Load the events for the selected Date\r\n    private void loadEventsForSelectedDates(Calendar date){\r\n\r\n\r\n        //Load events list\r\n        ArrayList<IEvent> eventsForDay = new ArrayList<>();\r\n\r\n\r\n        for (Event event : allEvents) {\r\n            if (event.isOnDate(date)) {\r\n                eventsForDay.add(event);\r\n            }\r\n        }\r\n\r\n        //Set the events onto the day view\r\n        hourlyDayView.setEvents(eventsForDay);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/modulus/FragmentCalendar/CalendarFragment.java b/app/src/main/java/com/example/modulus/FragmentCalendar/CalendarFragment.java
---- a/app/src/main/java/com/example/modulus/FragmentCalendar/CalendarFragment.java	(revision 94c53763436f4702df0a8ad10e269706ada8533f)
-+++ b/app/src/main/java/com/example/modulus/FragmentCalendar/CalendarFragment.java	(date 1744183059452)
-@@ -138,6 +138,4 @@
-     }
- 
- 
--
--
- }
-\ No newline at end of file
Index: app/src/main/java/com/example/modulus/Model/Kahn.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package com.example.modulus.Model;\n//\n//import com.example.modulus.FragmentInsights.InsightsFragment;\n//\n//import java.util.ArrayList;\n//import java.util.HashSet;\n//import java.util.List;\n//\n//public class Kahn {\n//    List<ModuleVertex> adjList;\n//    List<ModuleVertex> requiredList;\n//    public void setUpGraph() {\n//        for (ModuleModel mod : InsightsFragment.moduleList) {\n//            adjList.add(new ModuleVertex(mod));\n//        }\n//\n//    }\n//\n//    public List<ModuleVertex> RestrictedSet(TrackModel trackModel) {\n//        ArrayList<ModuleModel> required = new ArrayList<>();\n//        required.addAll(trackModel.getCore());\n//        required.addAll(trackModel.getElectives());\n////        if (minorModel != null) {\n////            required.addAll(minorModel.getCore());\n////            required.addAll(minorModel.getElectives());\n////        }\n//        ArrayList<ModuleVertex> requiredGraph = new ArrayList<>();\n//        for(ModuleModel m: required){\n//            requiredGraph.add(new ModuleVertex(m));\n//        }\n//        for(ModuleVertex v: adjList){\n//            if(isPreReqRequired(v, requiredGraph)){\n//                requiredGraph.add(v);\n//            }\n//        }\n//        requiredList = requiredGraph;\n//        return requiredGraph;\n//    }\n//\n//    public boolean isPreReqRequired(ModuleVertex moduleModel, List<ModuleVertex> list) {\n//        for (ModuleVertex u: list){\n//            List<ModuleVertex> preReq = u.hard;\n//            for(ModuleVertex m: preReq){\n//                if(m.getId().equals(u.getId())){\n//                    return true;\n//                }\n//            }\n//        }return false;\n//    }\n//\n//    public List<List<ModuleModel>> plan(){\n//        List<List<ModuleModel>> all = new ArrayList<>();\n//        List<PlannerModel> schedule = new ArrayList<>();\n//        boolean HASSFlag = false;\n//        int currentTerm = 0;\n//        List<ModuleModel> order = new ArrayList<>();\n//        //inDeg\n//        permute();\n//\n//    }\n//\n//    public void permute(TrackModel trackModel, List<List<ModuleModel>> all, List<PlannerModel> schedule, boolean hassFlag, List<ModuleModel> order, int currentTerm){\n//        if(currentTerm > 4){\n//            if(new HashSet<>(order).containsAll(trackModel.getCore())){\n//                all.add(order);\n//                return;\n//            }\n//        }\n//        List<ModuleModel> tempPlannerMods = new ArrayList<>();\n//        schedule.get(currentTerm).setModules(tempPlannerMods);\n//        fill(trackModel, all, schedule, hassFlag, order, currentTerm, 0);\n//    }\n//\n//    public void fill(TrackModel trackModel, List<List<ModuleModel>> all, List<PlannerModel> schedule, boolean hassFlag, List<ModuleModel> order, int currentTerm, int count){\n//        if(count == 4){\n//            boolean hasHASS = false;\n//            for(ModuleModel m: schedule.get(currentTerm).getModules()){\n//                if(m.getTags().contains(\"HASS\")){\n//                    hasHASS = true;\n//                }\n//            }\n//            order.addAll(schedule.get(currentTerm).getModules());\n//            permute(trackModel, all, schedule, hasHASS, order, currentTerm);\n//        }\n//        for(ModuleVertex v: requiredList){\n//            if(!order.toString().contains(v.toString())){\n//\n//            }\n//        }\n//    }\n//\n//    public boolean preReqCheck(){}\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/modulus/Model/Kahn.java b/app/src/main/java/com/example/modulus/Model/Kahn.java
--- a/app/src/main/java/com/example/modulus/Model/Kahn.java	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ b/app/src/main/java/com/example/modulus/Model/Kahn.java	(date 1744769766579)
@@ -37,11 +37,11 @@
 //        return requiredGraph;
 //    }
 //
-//    public boolean isPreReqRequired(ModuleVertex moduleModel, List<ModuleVertex> list) {
+//    public boolean isPreReqRequired(ModuleVertex v, List<ModuleVertex> list) {
 //        for (ModuleVertex u: list){
 //            List<ModuleVertex> preReq = u.hard;
 //            for(ModuleVertex m: preReq){
-//                if(m.getId().equals(u.getId())){
+//                if(m.getId().equals(v.getId())){
 //                    return true;
 //                }
 //            }
@@ -89,5 +89,20 @@
 //        }
 //    }
 //
-//    public boolean preReqCheck(){}
+//    public boolean preReqCheck(ModuleVertex v, List<ModuleModel> order){
+//        if(v.hard != null){
+//            for(ModuleVertex u: v.hard){
+//                if(!order.toString().contains(u.toString())){
+//                    return false;
+//                }
+//            }
+//        } else if(v.soft != null){
+//            for(ModuleVertex u: v.soft){
+//                if(!order.toString().contains(u.toString())){
+//                    return false;
+//                }
+//            }
+//        }
+//        return true;
+//    }
 //}
\ No newline at end of file
Index: app/src/main/java/com/example/modulus/FragmentPlanner/EditPlannerMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.modulus.FragmentPlanner;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.cardview.widget.CardView;\n\nimport com.example.modulus.Model.ModuleModel;\nimport com.example.modulus.Model.PlannerModel;\nimport com.example.modulus.FragmentInsights.InsightsFragment;\nimport com.example.modulus.R;\nimport com.google.android.material.card.MaterialCardView;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class EditPlannerMenu extends AppCompatActivity {\n    List<PlannerModel> basePlannerList = PlannerFragment.basePlannerList;\n    PlannerModel selectedPlanner;\n    MaterialCardView selectTermCard; TextView tvTerm;\n    int electiveLimit;\n    CardView coreCard; TextView tvCore;\n    MaterialCardView selectElectivesCard; TextView tvElectives; String[] electivesList;\n    CardView term3HASSCard; TextView tvTerm3HASS;\n    MaterialCardView selectHASSCard; TextView tvHASS; String[] HASSList;\n    boolean[] selectedElectives;\n    boolean changed;\n    ArrayList<String> selectedModulesIndex = new ArrayList<>();\n    String[] filteredModulesList;\n    ImageView backButton;\n    Button confirmButton;\n    SharedPreferences mPreferences;\n    final static String KEY_NAME = \"Electives\";\n    final static String KEY_PATH = \"Term\";\n    final String TAG = \"Edit Planner\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState){\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.dropdown_menu);\n        changed = false;\n\n        selectTermCard = findViewById(R.id.selectTermCard);\n        tvTerm = findViewById(R.id.tvTerm);\n        selectTermCard.setOnClickListener(v -> {\n            showTermDialog();\n        });\n\n\n        coreCard = findViewById(R.id.coreCard);\n        tvCore = findViewById(R.id.tvCore);\n        selectElectivesCard = findViewById(R.id.selectElectivesCard);\n        tvElectives = findViewById(R.id.tvElectives);\n        selectElectivesCard.setOnClickListener(v -> {\n            showElectivesDialog();\n        });\n\n        term3HASSCard = findViewById(R.id.term3HASS);\n        tvTerm3HASS = findViewById(R.id.tvTerm3HASS);\n        selectHASSCard = findViewById(R.id.selectHASSCard);\n        tvHASS = findViewById(R.id.tvHASS);\n        selectHASSCard.setOnClickListener(v -> {\n            showHASSDialog();\n        });\n\n        backButton = findViewById(R.id.backButton);\n        backButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent resultIntent = new Intent();\n                setResult( Activity.RESULT_OK, resultIntent);\n                finish();\n            }\n        });\n\n        mPreferences = this.getSharedPreferences(PlannerFragment.PREF_FILE, Context.MODE_PRIVATE);\n        confirmButton = findViewById(R.id.confirmButton);\n        confirmButton.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                if(!changed){\n                    Toast.makeText(EditPlannerMenu.this, \"No Changes Detected\", Toast.LENGTH_SHORT).show();;\n                }\n                else{\n                    StringBuilder updatedModules = new StringBuilder();\n                    if(coreCard.getVisibility() == View.VISIBLE){\n                        updatedModules.append(tvCore.getText().toString()).append(\"\\n\");\n                        System.out.println(\"HELP\" + updatedModules);\n                        Log.d(TAG, \"core\");\n                    }\n                    if(selectElectivesCard.getVisibility() == View.VISIBLE){\n                        updatedModules.append(tvElectives.getText().toString()).append(\"\\n\");\n                        System.out.println(\"HELP\" + updatedModules);\n                        Log.d(TAG, \"elective\");\n                    }\n                    if(term3HASSCard.getVisibility() == View.VISIBLE){\n                        updatedModules.append(tvTerm3HASS.getText().toString()).append(\"\\n\");\n                        System.out.println(\"HELP\" + updatedModules);\n                        Log.d(TAG, \"term3\");\n                    }\n                    if(selectHASSCard.getVisibility() == View.VISIBLE){\n                        updatedModules.append(tvHASS.getText().toString()).append(\"\\n\");\n                        System.out.println(\"HELP\" + updatedModules);\n                        Log.d(TAG, \"hass\");\n                    }\n                    System.out.println(updatedModules);\n                    Intent resultIntent = new Intent();\n                    resultIntent.putExtra(KEY_NAME, updatedModules.toString());\n                    resultIntent.putExtra(KEY_PATH, selectedPlanner.getTerm());\n\n                    setResult( Activity.RESULT_OK, resultIntent);\n                    finish();\n                }\n            }\n        });\n    }\n\n    private void showTermDialog(){\n        tvTerm = findViewById(R.id.tvTerm);\n        AlertDialog.Builder builder = new AlertDialog.Builder(EditPlannerMenu.this);\n\n        builder.setTitle(\"Select Term\");\n        builder.setCancelable(false);\n\n        String[] terms = new String[]{\"Term 3\", \"Term 4\", \"Term 5\", \"Term 6\", \"Term 7\", \"Term 8\"};\n        builder.setSingleChoiceItems(terms, -1, new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                tvTerm.setText(terms[which]);\n                selectedPlanner = getSelectedPlanner(terms[which]);\n                setValues();\n                dialog.dismiss();\n            }\n        }).setNeutralButton(\"Cancel\", new DialogInterface.OnClickListener() {\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n            }\n        });\n        AlertDialog mDialog = builder.create();\n        mDialog.show();\n    }\n    private void showElectivesDialog(){\n        if(selectedPlanner == null){\n            Toast.makeText(this, \"Select a Term first!\", Toast.LENGTH_SHORT).show();\n        }else{\n            selectedElectives = new boolean[electivesList.length];\n\n            AlertDialog.Builder builder = new AlertDialog.Builder(EditPlannerMenu.this);\n\n            builder.setTitle(\"Select Electives\");\n            builder.setCancelable(false);\n\n            builder.setMultiChoiceItems(electivesList, selectedElectives, new DialogInterface.OnMultiChoiceClickListener() {\n                int count = 0;\n                @Override\n                public void onClick(DialogInterface dialog, int which, boolean isChecked) {\n                    if(isChecked){\n                        selectedModulesIndex.add(String.valueOf(which));\n                    }else{\n                        selectedModulesIndex.remove(String.valueOf(which));\n                    }\n                    count += isChecked ? 1 : -1;\n                    int term = selectedPlanner.getTermInt();\n                    if(count > electiveLimit) {\n                        Toast.makeText(EditPlannerMenu.this, \"Limit Reached!.\", Toast.LENGTH_SHORT).show();\n                        selectedElectives[which] = false;\n                        selectedModulesIndex.remove(String.valueOf(which));\n                        count--;\n                        ((AlertDialog) dialog).getListView().setItemChecked(which, false);\n                    }\n                }\n            }).setPositiveButton(\"Select\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    tvElectives.setText(\"\");\n                    StringBuilder s = new StringBuilder();\n                    for(int i = 0; i < selectedModulesIndex.size(); i++){\n                        s.append(electivesList[Integer.parseInt(selectedModulesIndex.get(i))]);\n                        if(i != selectedModulesIndex.size() - 1){\n                            s.append(\"\\n\");\n                        }\n                    }\n                    tvElectives.setText(s.toString());\n                    changed = true;\n                }\n            }).setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    dialog.dismiss();\n                }\n            }).setNeutralButton(\"Clear All\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    for(int i = 0; i < selectedElectives.length; i++){\n                        selectedElectives[i] = false;\n                    }\n                    selectedModulesIndex.clear();\n                    tvElectives.setText(\"\");\n                }\n            });\n            AlertDialog mDialog = builder.create();\n            mDialog.show();\n        }\n    }\n\n    private void showHASSDialog(){\n        if(selectedPlanner == null){\n            Toast.makeText(this, \"Select a Term first!\", Toast.LENGTH_SHORT).show();\n        }else{\n            tvHASS = findViewById(R.id.tvHASS);\n            AlertDialog.Builder builder = new AlertDialog.Builder(EditPlannerMenu.this);\n\n            builder.setTitle(\"Select HASS\");\n            builder.setCancelable(false);\n\n            builder.setSingleChoiceItems(HASSList, -1, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    tvHASS.setText(HASSList[which]);\n                    changed = true;\n                    dialog.dismiss();\n                }\n            }).setNeutralButton(\"Cancel\", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                }\n            });\n            AlertDialog mDialog = builder.create();\n            mDialog.show();\n        }\n    }\n\n    private PlannerModel getSelectedPlanner(String term) {\n        for (PlannerModel planner : basePlannerList) {\n            if(planner.getTerm().equals(term))\n                return planner;\n        }\n        Log.d(\"Edit\", \"No Planner\");\n        return null;\n    }\n\n    private void setValues() {\n        TextView tv = findViewById(R.id.tvTerm);\n        tv.setText(selectedPlanner.getTerm());\n\n        //filter available\n        List<String> stringFilteredModulesList = new ArrayList<String>();\n        List<String> stringHASSList = new ArrayList<String>();\n        List<String> stringElectivesList = new ArrayList<String>();\n        for(ModuleModel module: InsightsFragment.moduleList){\n            if(!selectedPlanner.getModules().toString().contains(module.toString())){\n                if( module.getTerm().contains(String.valueOf(selectedPlanner.getTermInt())) ){\n                    stringFilteredModulesList.add(module.toString());\n                    if(module.getTags().contains(\"HASS\")){\n                        stringHASSList.add(module.toString());\n                    }else{\n                        stringElectivesList.add(module.toString());\n                    }\n                }\n            }\n        }\n        filteredModulesList = stringFilteredModulesList.toArray(new String[0]);\n        HASSList = stringHASSList.toArray(new String[0]);\n        electivesList = stringElectivesList.toArray(new String[0]);\n\n        //set values\n        electiveLimit = 3;\n        List<ModuleModel> plannerModulesList = selectedPlanner.getModules();\n        if(plannerModulesList != null) {\n            StringBuilder setTvCore = new StringBuilder();\n            StringBuilder setHASSCore = new StringBuilder();\n            for (ModuleModel module : plannerModulesList) {\n                if (module.getTags().contains(\"HASS\")) {\n                    setHASSCore.append(module.toString());\n                } else{\n                    setTvCore.append(module.toString()).append(\"\\n\");\n                    electiveLimit -= 1;\n                }\n            }\n            if (setTvCore.length() > 0) {\n                coreCard.setVisibility(View.VISIBLE);\n                tvCore.setText(setTvCore.toString().substring(0, setTvCore.length()-1));\n                if(electiveLimit == 0){\n                    selectElectivesCard.setVisibility(View.GONE);\n                }else{\n                    selectElectivesCard.setVisibility(View.VISIBLE);\n                }\n            }else{\n                coreCard.setVisibility(View.GONE);\n                tvCore.setText(\"Core\");\n            }\n\n            if (setHASSCore.length() > 0) {\n                term3HASSCard.setVisibility(View.VISIBLE);\n                tvTerm3HASS.setText(setHASSCore.toString());\n                selectHASSCard.setVisibility(View.GONE);\n            }else{\n                term3HASSCard.setVisibility(View.GONE);\n                tvTerm3HASS.setText(\"Term 3 HASS\");\n                selectHASSCard.setVisibility(View.VISIBLE);\n            }\n\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/modulus/FragmentPlanner/EditPlannerMenu.java b/app/src/main/java/com/example/modulus/FragmentPlanner/EditPlannerMenu.java
--- a/app/src/main/java/com/example/modulus/FragmentPlanner/EditPlannerMenu.java	(revision 09d2597df115954b257e49c187d32d151604aaaf)
+++ b/app/src/main/java/com/example/modulus/FragmentPlanner/EditPlannerMenu.java	(date 1744769766587)
@@ -255,9 +255,17 @@
         TextView tv = findViewById(R.id.tvTerm);
         tv.setText(selectedPlanner.getTerm());
 
+        List<ModuleModel> core = new ArrayList<>();
+        List<ModuleModel> rec = new ArrayList<>();
+        if(PlannerFragment.trackModel != null){
+            core = PlannerFragment.trackModel.getCore();
+            rec = PlannerFragment.trackModel.getRecMods();
+        }
+
         //filter available
         List<String> stringFilteredModulesList = new ArrayList<String>();
         List<String> stringHASSList = new ArrayList<String>();
+        List<String> stringCoreList = new ArrayList<String>();
         List<String> stringElectivesList = new ArrayList<String>();
         for(ModuleModel module: InsightsFragment.moduleList){
             if(!selectedPlanner.getModules().toString().contains(module.toString())){
@@ -265,6 +273,9 @@
                     stringFilteredModulesList.add(module.toString());
                     if(module.getTags().contains("HASS")){
                         stringHASSList.add(module.toString());
+                    }else if( (!core.isEmpty() && core.toString().contains(module.toString())) ||
+                            (!rec.isEmpty() && rec.toString().contains(module.toString()))){
+                        stringCoreList.add(module.toString());
                     }else{
                         stringElectivesList.add(module.toString());
                     }
@@ -273,7 +284,8 @@
         }
         filteredModulesList = stringFilteredModulesList.toArray(new String[0]);
         HASSList = stringHASSList.toArray(new String[0]);
-        electivesList = stringElectivesList.toArray(new String[0]);
+        stringCoreList.addAll(stringElectivesList);
+        electivesList = stringCoreList.toArray(new String[0]);
 
         //set values
         electiveLimit = 3;
